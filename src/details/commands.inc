#ifndef DEFINE_COMMAND
#error "This file is intended for textual inclusion with the DEFINE_COMMAND macro defined"
#endif

DEFINE_COMMAND("help", "list the commands available", 1),
DEFINE_COMMAND("exit", "exit the debugger", 1),
DEFINE_COMMAND("continue", "continue the program", 1),
DEFINE_COMMAND("breakpoint", "set breakpoint on the given line", 1),
DEFINE_COMMAND("info", "List all info commands", 1),
DEFINE_COMMAND("info address", "Describe where symbol SYM is stored.", 0),
DEFINE_COMMAND("info all-registers", "List of all registers and their contents, for selected stack frame.", 0),
DEFINE_COMMAND("info args", "All argument variables of current stack frame or those matching REGEXPs.", 0),
DEFINE_COMMAND("info auto-load", "Print current status of auto-loaded files.", 0),
DEFINE_COMMAND("info auxv", "Display the inferior's auxiliary vector.", 0),
DEFINE_COMMAND("info bookmarks", "Status of user-settable bookmarks.", 0),
DEFINE_COMMAND("info breakpoints", "Status of specified breakpoints (all user-settable breakpoints if no argument).", 0),
DEFINE_COMMAND("info checkpoints", "IDs of currently known checkpoints.", 0),
DEFINE_COMMAND("info classes", "All Objective-C classes, or those matching REGEXP.", 0),
DEFINE_COMMAND("info common", "Print out the values contained in a Fortran COMMON block.", 0),
DEFINE_COMMAND("info connections", "Target connections in use.", 0),
DEFINE_COMMAND("info copying", "Conditions for redistributing copies of GDB.", 0),
DEFINE_COMMAND("info dcache", "Print information on the dcache performance.", 0),
DEFINE_COMMAND("info display", "Expressions to display when program stops, with code numbers.", 0),
DEFINE_COMMAND("info exceptions", "List all Ada exception names.", 0),
DEFINE_COMMAND("info extensions", "All filename extensions associated with a source language.", 0),
DEFINE_COMMAND("info files", "Names of targets and files being debugged.", 0),
DEFINE_COMMAND("info float", "Print the status of the floating point unit.", 0),
DEFINE_COMMAND("info frame", "All about the selected stack frame.", 0),
DEFINE_COMMAND("info frame-filter", "List all registered Python frame-filters.", 0),
DEFINE_COMMAND("info functions", "All function names or those matching REGEXPs.", 0),
DEFINE_COMMAND("info guile", "Prefix command for Guile info displays.", 0),
DEFINE_COMMAND("info inferiors", "Print a list of inferiors being managed.", 0),
DEFINE_COMMAND("info line", "Core addresses of the code for a source line.", 0),
DEFINE_COMMAND("info locals", "All local variables of current stack frame or those matching REGEXPs.", 0),
DEFINE_COMMAND("info macro", "Show the definition of MACRO, and its source location.", 0),
DEFINE_COMMAND("info macros", "Show the definitions of all macros at LINESPEC, or the current source location.", 0),
DEFINE_COMMAND("info main", "Get main symbol to identify entry point into program.", 0),
DEFINE_COMMAND("info mem", "Memory region attributes.", 0),
DEFINE_COMMAND("info missing-debug-handlers", "GDB command to list missing debug handlers.", 0),
DEFINE_COMMAND("info missing-objfile-handlers", "GDB command to list missing objfile handlers.", 0),
DEFINE_COMMAND("info module", "Print information about modules.", 0),
DEFINE_COMMAND("info modules", "All module names, or those matching REGEXP.", 0),
DEFINE_COMMAND("info os", "Show OS data ARG.", 0),
DEFINE_COMMAND("info pretty-printer", "GDB command to list all registered pretty-printers.", 0),
DEFINE_COMMAND("info probes", "Show available static probes.", 0),
DEFINE_COMMAND("info proc", "Show additional information about a process.", 0),
DEFINE_COMMAND("info program", "Execution status of the program.", 0),
DEFINE_COMMAND("info record", "Info record options.", 0),
DEFINE_COMMAND("info registers", "List of integer registers and their contents, for selected stack frame.", 0),
DEFINE_COMMAND("info rpm-suggestions", "Relist any RPM installation suggestions that have been made.", 0),
DEFINE_COMMAND("info scope", "List the variables local to a scope.", 0),
DEFINE_COMMAND("info selectors", "All Objective-C selectors, or those matching REGEXP.", 0),
DEFINE_COMMAND("info sharedlibrary", "Status of loaded shared object libraries.", 0),
DEFINE_COMMAND("info signals", "What debugger does when program gets various signals.", 0),
DEFINE_COMMAND("info skip", "Display the status of skips.", 0),
DEFINE_COMMAND("info source", "Information about the current source file.", 0),
DEFINE_COMMAND("info sources", "All source files in the program or those matching REGEXP.", 0),
DEFINE_COMMAND("info stack", "Backtrace of the stack, or innermost COUNT frames.", 0),
DEFINE_COMMAND("info static-tracepoint-markers", "List target static tracepoints markers.", 0),
DEFINE_COMMAND("info symbol", "Describe what symbol is at location ADDR.", 0),
DEFINE_COMMAND("info target", "Names of targets and files being debugged.", 0),
DEFINE_COMMAND("info tasks", "Provide information about all known Ada tasks.", 0),
DEFINE_COMMAND("info terminal", "Print inferior's saved terminal status.", 0),
DEFINE_COMMAND("info threads", "Display currently known threads.", 0),
DEFINE_COMMAND("info tracepoints", "Status of specified tracepoints (all tracepoints if no argument).", 0),
DEFINE_COMMAND("info tvariables", "Status of trace state variables and their values.", 0),
DEFINE_COMMAND("info type-printers", "GDB command to list all registered type-printers.", 0),
DEFINE_COMMAND("info types", "All type names, or those matching REGEXP.", 0),
DEFINE_COMMAND("info unwinder", "GDB command to list unwinders.", 0),
DEFINE_COMMAND("info variables", "All global and static variable names or those matching REGEXPs.", 0),
DEFINE_COMMAND("info vector", "Print the status of the vector unit.", 0),
DEFINE_COMMAND("info vtbl", "Show the virtual function table for a C++ object.", 0),
DEFINE_COMMAND("info warranty", "Various kinds of warranty you do not have.", 0),
DEFINE_COMMAND("info watchpoints", "Status of specified watchpoints (all watchpoints if no argument).", 0),
DEFINE_COMMAND("info win", "List of all displayed windows.", 0),
DEFINE_COMMAND("info xmethod", "GDB command to list registered xmethod matchers.", 0),
